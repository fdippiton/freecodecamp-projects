*, ::before, ::after {
    padding: 0;
    margin: 0;
}

html {
    font-size: 62.5%;
    /* set to 62.5%. This will set the default font size for your web page to 10px (the browser default is 16px).
    This will make it easier for you to work with rem units later, as 2rem would be 20px. */
    
    box-sizing: border-box;
}

body {
    font-family: Baskervville, serif;
    color: linen;
    background-color: rgb(20, 30, 40);
}

h1 {
    font-family: Anton, sans-serif;
}

h2, h3, h4, h5, h6 {
    font-family: Raleway, sans-serif;
}

a {
    text-decoration: none;
    color: linen;
}

/* -------------------------------------------------------------------------- */
/*                                    GRID                                    */
/* -------------------------------------------------------------------------- */


/* CSS Grid offers a two-dimensional grid-based layout, allowing you to center items horizontally and vertically while still retaining control 
to do things like overlap elements. */


main {
    display: grid;
    /* grid-template-columns: 1fr 94rem 1fr;  Set the content to have a three-column layout */
    grid-template-columns: minmax(2rem, 1fr)  minmax(min-content, 94rem) minmax(2rem, 1fr);
    /* Use the minmax function to make your columns responsive on any device. The minmax function takes two arguments, the first being 
    the minimum value and the second being the maximum. These values could be a length, percentage, fr, or even a keyword like max-content. */
    row-gap: 3rem; /* To add space between rows in the grid layout, you can use the row-gap property. */
}

.heading {
    /* One option is the grid-column property, which is shorthand for grid-column-start and grid-column-end. The grid-column property tells 
    the grid item which grid line to start and end at. */
    grid-column: 2/3;
    display: grid;
    grid-template-columns: repeat(2, 1fr); /* he CSS repeat() function is used to repeat a value, rather than writing it out manually, 
    and is helpful for grid layouts. For example, setting the grid-template-columns property to repeat(20, 200px) would create 20 columns each 200px wide. */
    row-gap: 1.5rem;
}

.text {
    grid-column: 2/3;
    font-size: 1.8rem;
    letter-spacing: 0.6px;
    column-width: 25rem; /* you can create columns within an element without using Grid by using the column-width property. */
    text-align: justify; /* To justify the text */
}

.hero {
    grid-column: 1/-1; /* This will tell the element to span the full width of the grid. */
    /* Remember that the grid-column property determines which columns an element starts and ends at. There may be times where you are 
    unsure of how many columns your grid will have, but you want an element to stop at the last column. To do this, you can use -1 for the end column. */
    position: relative;
}

img {
    width: 100%;
    object-fit: cover;
    /* The object-fit property tells the browser how to position the element within its container. In this case, cover will set 
    the image to fill the container, cropping as needed to avoid changing the aspect ratio. */
}

.hero-title {
    text-align: center;
    color: orangered;
    font-size: 8rem;
}

.hero-subtitle {
    font-size: 2.4rem;
    color: orangered;
    text-align: center;
}

.author {
    font-size: 2rem;
    font-family: Raleway, sans-serif;
}

.author-name a:hover {
    background-color: #306203;
}

.publish-date {
    color: rgba(255, 255, 255, 0.5);
}

.social-icons {
    display: grid;
    font-size: 3rem;
    grid-template-columns: repeat(5, 1fr);
    grid-auto-flow: column;
    /* 
    If you wanted to add more social icons, but keep them on the same row, you would need to update grid-template-columns to create additional 
    columns. As an alternative, you can use the grid-auto-flow property.
    This property takes either row or column as the first value, with an optional second value of dense. grid-auto-flow uses an auto-placement 
    algorithm to adjust the grid layout. Setting it to column will tell the algorithm to create new columns for content as needed. The dense value allows the algorithm to backtrack and fill holes in the grid with smaller items, which can result in items appearing out of order.
     */
    grid-auto-columns: 1fr;
    align-items: center;
    /* 
    with CSS Grid you can align the content of grid items with align-items and justify-items. align-items will align child elements along the 
    column axis, and justify-items will align child elements along the row axis.
    */
}

.first-paragraph::first-letter {
    /* The ::first-letter pseudo-selector allows you to target the first letter in the text content of an element. */
    font-size: 6rem;
    color: orangered;
    float: left;
    margin-right: 2rem;
}

hr {
    margin: 1.5rem 0;
    border: 1px solid rgba(120, 120, 120, 0.6);
}

.quote {
    color: #00beef;
    font-size: 2.4rem;
    text-align: center;
    font-family: Raleway, sans-serif;
}

.quote::before {
    content: '" ';
}

.quote::after {
    content: ' "';
}

.text-with-images {
    display: grid;
    grid-template-columns: 1fr 2fr;
    column-gap: 3rem;
    margin-bottom: 3rem;
}

.lists {
    list-style-type: none; /* This will get rid of the bullet points on the list items. */
    margin-top: 2rem;
}

.lists li {
    margin-bottom: 1.5rem;
}

.list-title, .list-subtitle {
    color: #00beef;
}

.image-wrapper {
    display: grid;
    grid-template-columns: 2fr 1fr;
    grid-template-rows: repeat(3, min-content);
    gap: 2rem; /* The gap property is a shorthand way to set the value of column-gap and row-gap at the same time. If given one 
    value, it sets the column-gap and row-gap both to that value. If given two values, it sets the row-gap to the first value and the column-gap to the second. */
    place-items: center; /* The place-items property can be used to set the align-items and justify-items values at the same time. 
    The place-items property takes one or two values. If one value is provided, it is used for both the align-items and justify-items properties. 
    If two values are provided, the first value is used for the align-items property and the second value is used for the justify-items property. */
}

.image-1, .image-3 {
    grid-column: 1/-1; /* This will allow the first and third images to span the full width of the grid. */
}

@media only screen and (max-width: 720px) {
    .image-wrapper {
        grid-template-columns: 1fr;
    }
}

@media only screen and (max-width:600px) {
    .text-with-images {
        grid-template-columns: 1fr;
    }
}

@media only screen and (max-width: 550px) {
    .hero-title {
        font-size: 6rem;
    }

    .hero-subtitle, .author, .quote, .list-title {
        font-size: 1.8rem;
    }

    .social-icons {
        font-size: 2rem;
    }

    .text {
        font-size: 1.6rem;
    }
}

@media only screen and (max-width: 420px) {
    .hero-title {
        font-size: 4.5rem;
    }
}




/* -------------------------------------------------------------------------- */
/*                                  CSS GRID                                  */
/* -------------------------------------------------------------------------- */


/* 

^ grid-template-columns
^ grid-template-rows

#jardin {
    display: grid;
    grid-template-columns: 20% 20% 20% 20% 20%; 
    grid-template-rows: 20% 20% 20% 20% 20%; 
}

^ grid-column-start
Ubica la posicion inicial del elemento

^ grid-column-end
Para extender el elemento varias columnas

^ grid-column-end: span 
El numero de posiciones que tomara

^ grid-column
Abreviatura de grid-column-start y grid-column-end

^ grid-row-start
Ubica la posicion inicial del elemento en la fila

^ grid-row-end
Para extender el elemento varias filas

^ grid-row-end: span 
El numero de posiciones que tomara

^ grid-row
Abreviatura de grid-row-start y grid-row-end

^ grid-area
Admite cuatro valores separados por barras oblicuas: grid-row-start, grid-column-start, grid-row-end, seguido de grid-column-end.

^ order
Indica una posicion en la cual queremos que explictamente este el elemento

^ grid-template-columns: repeat(5, 20%);

Acepta valores 100px, 3em, y 40% respectivamente.

*/

/* -------------------------------- Examples -------------------------------- */

/*
#agua {
    grid-column-start: 3; 
    grid-column-end: 4; 

    * grid-column-end: -2; 
    Indicar la segunda l√≠nea comenzando por la derecha.
    * grid-column-end: span 2;

    * grid-column: 4/6;
    Empieza en la columna 4 y termina en la 6

    * grid-column: 2/span 3;

    * grid-area: 1 / 1 / 3 / 6;

    * order: 5;
}

#veneno {
    grid-column-start: 5; 
}

*/


